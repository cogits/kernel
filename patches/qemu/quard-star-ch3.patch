commit a0d5b5ed1ae1a09d86931f0ea8797e2a10371742
Author: snoire <snoire@qq.com>
Date:   Sun May 5 14:39:40 2024 +0800

    ch3

diff --git a/hw/riscv/Kconfig b/hw/riscv/Kconfig
index 7d278ea..4dfb3a5 100644
--- a/hw/riscv/Kconfig
+++ b/hw/riscv/Kconfig
@@ -49,6 +49,9 @@ config RISCV_VIRT
 config QUARD_STAR
     bool
     select SERIAL
+    select RISCV_ACLINT
+    select SIFIVE_PLIC
+    select PFLASH_CFI01

 config SHAKTI_C
     bool
diff --git a/hw/riscv/quard_star.c b/hw/riscv/quard_star.c
index 264d21e..3e3ca8b 100644
--- a/hw/riscv/quard_star.c
+++ b/hw/riscv/quard_star.c
@@ -31,6 +31,8 @@
 #include "hw/riscv/quard_star.h"
 #include "hw/riscv/boot.h"
 #include "hw/riscv/numa.h"
+#include "hw/intc/riscv_aclint.h"
+#include "hw/intc/sifive_plic.h"
 #include "chardev/char.h"
 #include "sysemu/arch_init.h"
 #include "sysemu/device_tree.h"
@@ -39,10 +41,56 @@
 static const MemMapEntry virt_memmap[] = {
     [QUARD_STAR_MROM]  = {        0x0,        0x8000 },
     [QUARD_STAR_SRAM]  = {     0x8000,        0x8000 },
+    [QUARD_STAR_CLINT] = {  0x2000000,       0x10000 },
+    [QUARD_STAR_PLIC]  = {  0xc000000, QUARD_STAR_PLIC_SIZE(QUARD_STAR_CPUS_MAX * 2) },
     [QUARD_STAR_UART0] = { 0x10000000,         0x100 },
+    [QUARD_STAR_UART1] = { 0x10001000,         0x100 },
+    [QUARD_STAR_UART2] = { 0x10002000,         0x100 },
+    [QUARD_STAR_FLASH] = { 0x20000000,     0x2000000 },
     [QUARD_STAR_DRAM]  = { 0x80000000,           0x0 },
 };

+#define QUARD_STAR_FLASH_SECTOR_SIZE (256 * KiB)
+
+static PFlashCFI01 *quard_star_flash_create(RISCVVirtState *s,
+                                       const char *name,
+                                       const char *alias_prop_name)
+{
+    DeviceState *dev = qdev_new(TYPE_PFLASH_CFI01);
+
+    qdev_prop_set_uint64(dev, "sector-length", QUARD_STAR_FLASH_SECTOR_SIZE);
+    qdev_prop_set_uint8(dev, "width", 4);
+    qdev_prop_set_uint8(dev, "device-width", 2);
+    qdev_prop_set_bit(dev, "big-endian", false);
+    qdev_prop_set_uint16(dev, "id0", 0x89);
+    qdev_prop_set_uint16(dev, "id1", 0x18);
+    qdev_prop_set_uint16(dev, "id2", 0x00);
+    qdev_prop_set_uint16(dev, "id3", 0x00);
+    qdev_prop_set_string(dev, "name", name);
+
+    object_property_add_child(OBJECT(s), name, OBJECT(dev));
+    object_property_add_alias(OBJECT(s), alias_prop_name,
+                              OBJECT(dev), "drive");
+
+    return PFLASH_CFI01(dev);
+}
+
+static void quard_star_flash_map(PFlashCFI01 *flash,
+                            hwaddr base, hwaddr size,
+                            MemoryRegion *sysmem)
+{
+    DeviceState *dev = DEVICE(flash);
+
+    assert(QEMU_IS_ALIGNED(size, QUARD_STAR_FLASH_SECTOR_SIZE));
+    assert(size / QUARD_STAR_FLASH_SECTOR_SIZE <= UINT32_MAX);
+    qdev_prop_set_uint32(dev, "num-blocks", size / QUARD_STAR_FLASH_SECTOR_SIZE);
+    sysbus_realize_and_unref(SYS_BUS_DEVICE(dev), &error_fatal);
+
+    memory_region_add_subregion(sysmem, base,
+                                sysbus_mmio_get_region(SYS_BUS_DEVICE(dev),
+                                                       0));
+}
+
 static void quard_star_setup_rom_reset_vec(MachineState *machine, RISCVHartArrayState *harts,
                                hwaddr start_addr,
                                hwaddr rom_base, hwaddr rom_size,
@@ -94,9 +142,11 @@ static void quard_star_machine_init(MachineState *machine)
     MemoryRegion *main_mem = g_new(MemoryRegion, 1);
     MemoryRegion *sram_mem = g_new(MemoryRegion, 1);
     MemoryRegion *mask_rom = g_new(MemoryRegion, 1);
-    char *soc_name;
-    int i, base_hartid, hart_count;
+    int i, j, base_hartid, hart_count;
     int socket_count = riscv_socket_count(machine);
+    char *plic_hart_config, *soc_name;
+    size_t plic_hart_config_len;
+    DeviceState *mmio_plic=NULL;

     /* Check socket count limit */
     if (QUARD_STAR_SOCKETS_MAX < socket_count) {
@@ -135,6 +185,46 @@ static void quard_star_machine_init(MachineState *machine)
         object_property_set_int(OBJECT(&s->soc[i]), "num-harts",
                                 hart_count, &error_abort);
         sysbus_realize(SYS_BUS_DEVICE(&s->soc[i]), &error_abort);
+
+        /* Per-socket SiFive CLINT */
+        riscv_aclint_swi_create(
+            memmap[QUARD_STAR_CLINT].base + i * memmap[QUARD_STAR_CLINT].size,
+            base_hartid, hart_count, false);
+        riscv_aclint_mtimer_create(memmap[QUARD_STAR_CLINT].base +
+                i * memmap[QUARD_STAR_CLINT].size + RISCV_ACLINT_SWI_SIZE,
+            RISCV_ACLINT_DEFAULT_MTIMER_SIZE, base_hartid, hart_count,
+            RISCV_ACLINT_DEFAULT_MTIMECMP, RISCV_ACLINT_DEFAULT_MTIME,
+            RISCV_ACLINT_DEFAULT_TIMEBASE_FREQ, true);
+
+        plic_hart_config_len =
+            (strlen(QUARD_STAR_PLIC_HART_CONFIG) + 1) * hart_count;
+        plic_hart_config = g_malloc0(plic_hart_config_len);
+        for (j = 0; j < hart_count; j++) {
+            if (j != 0) {
+                strncat(plic_hart_config, ",", plic_hart_config_len);
+            }
+            strncat(plic_hart_config, QUARD_STAR_PLIC_HART_CONFIG,
+                plic_hart_config_len);
+            plic_hart_config_len -= (strlen(QUARD_STAR_PLIC_HART_CONFIG) + 1);
+        }
+
+        s->plic[i] = sifive_plic_create(
+            memmap[QUARD_STAR_PLIC].base + i * memmap[QUARD_STAR_PLIC].size,
+            plic_hart_config, hart_count, base_hartid,
+            QUARD_STAR_PLIC_NUM_SOURCES,
+            QUARD_STAR_PLIC_NUM_PRIORITIES,
+            QUARD_STAR_PLIC_PRIORITY_BASE,
+            QUARD_STAR_PLIC_PENDING_BASE,
+            QUARD_STAR_PLIC_ENABLE_BASE,
+            QUARD_STAR_PLIC_ENABLE_STRIDE,
+            QUARD_STAR_PLIC_CONTEXT_BASE,
+            QUARD_STAR_PLIC_CONTEXT_STRIDE,
+            memmap[QUARD_STAR_PLIC].size);
+        g_free(plic_hart_config);
+
+        if (i == 0) {
+            mmio_plic = s->plic[i];
+        }
     }

     memory_region_init_ram(main_mem, NULL, "riscv_quard_star_board.dram",
@@ -152,10 +242,25 @@ static void quard_star_machine_init(MachineState *machine)
     memory_region_add_subregion(system_memory, memmap[QUARD_STAR_MROM].base,
                                 mask_rom);

-    quard_star_setup_rom_reset_vec(machine, &s->soc[0], memmap[QUARD_STAR_MROM].base,
-                              virt_memmap[QUARD_STAR_MROM].base,
-                              virt_memmap[QUARD_STAR_MROM].size,
+    quard_star_setup_rom_reset_vec(machine, &s->soc[0], memmap[QUARD_STAR_FLASH].base,
+                              memmap[QUARD_STAR_MROM].base,
+                              memmap[QUARD_STAR_MROM].size,
                               0x0, 0x0);
+
+    serial_mm_init(system_memory, memmap[QUARD_STAR_UART0].base,
+        0, qdev_get_gpio_in(DEVICE(mmio_plic), QUARD_STAR_UART0_IRQ), 399193,
+        serial_hd(0), DEVICE_LITTLE_ENDIAN);
+    serial_mm_init(system_memory, memmap[QUARD_STAR_UART1].base,
+        0, qdev_get_gpio_in(DEVICE(mmio_plic), QUARD_STAR_UART1_IRQ), 399193,
+        serial_hd(1), DEVICE_LITTLE_ENDIAN);
+    serial_mm_init(system_memory, memmap[QUARD_STAR_UART2].base,
+        0, qdev_get_gpio_in(DEVICE(mmio_plic), QUARD_STAR_UART2_IRQ), 399193,
+        serial_hd(2), DEVICE_LITTLE_ENDIAN);
+
+    s->flash = quard_star_flash_create(s, "quard-star.flash0", "pflash0");
+    pflash_cfi01_legacy_drive(s->flash, drive_get(IF_PFLASH, 0, 0));
+    quard_star_flash_map(s->flash, memmap[QUARD_STAR_FLASH].base,
+                         memmap[QUARD_STAR_FLASH].size, system_memory);
 }

 static void quard_star_machine_instance_init(Object *obj)
diff --git a/include/hw/riscv/quard_star.h b/include/hw/riscv/quard_star.h
index 6a9e4d1..58d79ab 100644
--- a/include/hw/riscv/quard_star.h
+++ b/include/hw/riscv/quard_star.h
@@ -21,6 +21,7 @@

 #include "hw/riscv/riscv_hart.h"
 #include "hw/sysbus.h"
+#include "hw/block/flash.h"
 #include "qom/object.h"

 #define QUARD_STAR_CPUS_MAX 8
@@ -37,17 +38,38 @@ struct RISCVVirtState {

     /*< public >*/
     RISCVHartArrayState soc[QUARD_STAR_SOCKETS_MAX];
+    DeviceState *plic[QUARD_STAR_SOCKETS_MAX];
+    PFlashCFI01 *flash;
 };

 enum {
     QUARD_STAR_MROM,
     QUARD_STAR_SRAM,
+    QUARD_STAR_CLINT,
+    QUARD_STAR_PLIC,
     QUARD_STAR_UART0,
+    QUARD_STAR_UART1,
+    QUARD_STAR_UART2,
+    QUARD_STAR_FLASH,
     QUARD_STAR_DRAM,
 };

 enum {
     QUARD_STAR_UART0_IRQ = 10,
+    QUARD_STAR_UART1_IRQ = 11,
+    QUARD_STAR_UART2_IRQ = 12,
 };

+#define QUARD_STAR_PLIC_HART_CONFIG    "MS"
+#define QUARD_STAR_PLIC_NUM_SOURCES    127
+#define QUARD_STAR_PLIC_NUM_PRIORITIES 7
+#define QUARD_STAR_PLIC_PRIORITY_BASE  0x04
+#define QUARD_STAR_PLIC_PENDING_BASE   0x1000
+#define QUARD_STAR_PLIC_ENABLE_BASE    0x2000
+#define QUARD_STAR_PLIC_ENABLE_STRIDE  0x80
+#define QUARD_STAR_PLIC_CONTEXT_BASE   0x200000
+#define QUARD_STAR_PLIC_CONTEXT_STRIDE 0x1000
+#define QUARD_STAR_PLIC_SIZE(__num_context) \
+    (QUARD_STAR_PLIC_CONTEXT_BASE + (__num_context) * QUARD_STAR_PLIC_CONTEXT_STRIDE)
+
 #endif
